package lz4

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"testing"

	"github.com/els0r/goProbe/v4/pkg/goDB/encoder/encoders"
)

type testCase struct {
	uncompressed string
	compressed   []string
}

var testCases = []testCase{
	{
		uncompressed: "The quick brown fox jumped over the lazy dog.",
		compressed: []string{
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
			"8B5UaGUgcXVpY2sgYnJvd24gZm94IGp1bXBlZCBvdmVyIHRoZSBsYXp5IGRvZy4=",
		},
	},
	{
		uncompressed: `Amidst the azure sky and rolling green hills, a tranquil
		stream glistens. Birds chirp melodies, and trees sway with the gentle wind.
		Nearby, a squirrel scurries, its tail twitching. Nature's symphony unfolds,
		a testament to the world's vibrant tapestry.`,
		compressed: []string{
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
			"8VJBbWlkc3QgdGhlIGF6dXJlIHNreSBhbmQgcm9sbGluZyBncmVlbiBoaWxscywgYSB0cmFucXVpbAoJCXN0cmVhbSBnbGlzdGVucy4gQmlyZHMgY2hpcnAgbWVsb2RpZXMsTQDxAHRyZWVzIHN3YXkgd2l0aG8A8AZnZW50bGUgd2luZC4KCQlOZWFyYnljAOFzcXVpcnJlbCBzY3VyckQA8TBpdHMgdGFpbCB0d2l0Y2hpbmcuIE5hdHVyZSdzIHN5bXBob255IHVuZm9sZHMsCgkJYSB0ZXN0YW1lbnQgdG9wANB3b3JsZCdzIHZpYnJhFwCAYXBlc3RyeS4=",
		},
	},
	{
		uncompressed: `In the heart of the bustling city, skyscrapers towered above,
		casting shadows on the busy streets below. People hurried to and fro, each
		with a story of their own. Amidst the urban jungle, the same cafe on the corner
		became a beacon for many. Locals and tourists alike frequented the cafe on the
		corner, drawn to its aromatic brews and fresh pastries.
		The city had its own rhythm, a repetitive beat that resonated with the footsteps
		of its inhabitants. Every morning, as dawn broke, the same jogger would pass the
		same old oak tree, its leaves whispering tales of yesteryears. The rhythmic
		footsteps were echoed by the consistent chimes of the nearby clock tower, a
		relic from the past, still ticking, still standing.
		Near the central park, children played the same games their parents once did,
		laughing and chasing each other in circles. The merry-go-round spun, carrying
		giggles and memories, spinning the same memories for generations.
		But even in this repetitive dance of life, there were moments of unique beauty.
		A street musician, playing the same tune every evening, was one day joined by a
		violinist, creating a mesmerizing duet that stopped passersby in their tracks.
		The same tune was transformed, revealing the magic hidden within.
		And so, the city continued its song, a mix of the same melodies and surprising
		harmonies, reminding everyone that while some things remain constant, there's
		always room for a new note.`,
		compressed: []string{
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQU5lYXIwANBjZW50cmFsIHBhcmsscwDGbGRyZW4gcGxheWVkGgEgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8hdtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dsZTYCQG1lbW8wAmAsIHNwaW7CAQaYAAQcAAHEAqFnZW5lcmF0aW9uXAKAQnV0IGV2ZW59AEh0aGlzTgIgZGG9AGJvZiBsaWYCAiJyZY8BMm1vbd4AcWYgdW5pcXV6AjB1dHlSABNBvgOhIG11c2ljaWFuLCkBCZIAYXR1bmUgZXACAH0AAYABIHdhLgEAdgBieSBqb2lu7wEAvgFwdmlvbGluabQBQWNyZWE2BKBhIG1lc21lcml6DgAzZHVl+AJic3RvcHBlmQJSZXJzYnnZAACTAVV0cmFja1EDBogAAHkA9AR0cmFuc2Zvcm1lZCwgcmV2ZWFssQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyBzb9QAVGEgbWl4nQIDjAFDbG9kabUBcnN1cnByaXPOAWFoYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuAUFtYWluEQMAxgMDpQEQJ+MDsWFsd2F5cyByb29t+QGwYSBuZXcgbm90ZS4=",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQU5lYXIwANBjZW50cmFsIHBhcmsscwDGbGRyZW4gcGxheWVkGgEgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8hdtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dsZTYCQG1lbW8wAmAsIHNwaW7CAQaYAAQcAAHEAqFnZW5lcmF0aW9uXAKAQnV0IGV2ZW59AEh0aGlzTgIgZGG9AGJvZiBsaWYCAiJyZY8BMm1vbd4AcWYgdW5pcXV6AjB1dHlSABNBvgOhIG11c2ljaWFuLCkBCZIAYXR1bmUgZXACAH0AAYABIHdhLgEAdgBieSBqb2lu7wEAvgFwdmlvbGluabQBQWNyZWE2BKBhIG1lc21lcml6DgAzZHVl+AJic3RvcHBlmQJSZXJzYnnZAACTAVV0cmFja1EDBogAAHkA9AR0cmFuc2Zvcm1lZCwgcmV2ZWFssQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyBzb9QAVGEgbWl4nQIDjAFDbG9kabUBcnN1cnByaXPOAWFoYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuAUFtYWluEQMAxgMDpQEQJ+MDsWFsd2F5cyByb29t+QGwYSBuZXcgbm90ZS4=",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCUHBhcmVuqwFwbmNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgFBbWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCYHBhcmVudNYCYGNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAqBCdXQgZXZlbiBpqAIoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFRY3JlYXRDAZAgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIQcyoAMWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB9ABuc2lzdGVudCBjaGltZXOAAsJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAnsCYHBhcmVudNYCYGNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAqBCdXQgZXZlbiBpqAIoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFRY3JlYXRDAZAgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQD0BHRyYW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwGdA4Jjb250aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIQcyoAMWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCkc2hhZG93cyBvbkMA8zB5IHN0cmVldHMgYmVsb3cuIFBlb3BsZSBodXJyaWVkIHRvIGFuZCBmcm8sIGVhY2gKCQl3aXRoIGEgc3RvcnmNAOFpciBvd24uIEFtaWRzdFwA0XVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAGWhYAADwAAFaAHAsIGRyYXduxAAQaTgA03JvbWF0aWMgYnJld3PXAPEEZXNoIHBhc3RyaWVzLgoJCVRoZVEBQCBoYWQ2AADYAPAGIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAMZsZHJlbiBwbGF5ZWQaASBnYYsAAXsCACsAMGVudNYCYGNlIGRpZPICUGxhdWdoAgEA5wFAY2hhcwwAAMEC8wEgb3RoZXIgaW4gY2lyY2xlDwHyF21lcnJ5LWdvLXJvdW5kIHNwdW4sIGNhcnJ5aW5nCgkJZ2lnZ2xlNgJAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAqBCdXQgZXZlbiBpqAIoaXNOAlBkYW5jZVsBMmxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBhdHVuZSBlcAIAfQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFRY3JlYXRDAZAgbWVzbWVyaXoOADJkdWX4AgACBDJwcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMFiAAAeQAAHAD0AW5zZm9ybWVkLCByZXZlYWyxAMFtYWdpYyBoaWRkZW5NAyFpbucAAJIBEm8YAwCdAwCVAlJ0aW51ZaMDIXNvRANEIG1peJ0CA4wBQ2xvZGm1AXJzdXJwcmlzzgFhaGFybW9uwwFBcmVtaYYCAiQBABYBAN0AAEUDUGxlIHNvugAASQIQcyoAMWFpbhEDAMYDA6UBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
		},
	},
	{
		uncompressed: `In the heart of the bustling city, skyscrapers towered above,
		casting shadows on the busy streets below. People hurried to and fro, each
		with a story of their own. Amidst the urban jungle, the same cafe on the corner
		became a beacon for many. Locals and tourists alike frequented the cafe on the
		corner, drawn to its aromatic brews and fresh pastries.
		The city had its own rhythm, a repetitive beat that resonated with the footsteps
		of its inhabitants. Every morning, as dawn broke, the same jogger would pass the
		same old oak tree, its leaves whispering tales of yesteryears. The rhythmic
		footsteps were echoed by the consistent chimes of the nearby clock tower, a
		relic from the past, still ticking, still standing.
		Near the central park, children played the same games their parents once did,
		laughing and chasing each other in circles. The merry-go-round spun, carrying
		giggles and memories, spinning the same memories for generations.
		But even in this repetitive dance of life, there were moments of unique beauty.
		A street musician, playing the same tune every evening, was one day joined by a
		violinist, creating a mesmerizing duet that stopped passersby in their tracks.
		The same tune was transformed, revealing the magic hidden within.
		And so, the city continued its song, a mix of the same melodies and surprising
		harmonies, reminding everyone that while some things remain constant, there's
		always room for a new note.`,
		compressed: []string{
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4GlyIG93bi4gQW1pZHN0EgDhIHVyYmFuIGp1bmdsZSwSAJRzYW1lIGNhZmV/AMBjb3JuZXIKCQliZWMcAPEKYSBiZWFjb24gZm9yIG1hbnkuIExvY2Fsc4MA8Ah0b3VyaXN0cyBhbGlrZSBmcmVxdWVudKQAAEwABlgAAPAAAVoAcCwgZHJhd27EABBpOADCcm9tYXRpYyBicmV3VADwBGZyZXNoIHBhc3RyaWVzLgoJCVRMAHFpdHkgaGFkNgDwCW93biByaHl0aG0sIGEgcmVwZXRpdGl2ZawAAOoAkGF0IHJlc29uYYoAARsBAI8A4WZvb3RzdGVwcwoJCW9mSQDwEWluaGFiaXRhbnRzLiBFdmVyeSBtb3JuaW5nLCBhcyBkqgBIYnJvay4BwGpvZ2dlciB3b3VsZKcAEHMbADEKCQkdAIBvbGQgb2FrIMABESxjAOBsZWF2ZXMgd2hpc3BlcvEBUHRhbGVzpQHQeWVzdGVyeWVhcnMuIOUAAtQAVWljCgkJrQAQIDcCoCBlY2hvZWQgYnltAPIBIGNvbnNpc3RlbnQgY2hpbU4AABkAwm5lYXJieSBjbG9ja3ICsCwgYQoJCXJlbGljMQIRbScAAF0BwSwgc3RpbGwgdGlja/AAAg8AgHN0YW5kaW5neAFBTmVhcjAA0GNlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEAiQACmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAgcnkGAACuAEAsIHdhLgEAdgBieSBqb2lu7wEAvgFwdmlvbGluabQBQWNyZWE2BKBhIG1lc21lcml6DgAzZHVl+AJic3RvcHBlmQJSZXJzYnnZAJFlaXIgdHJhY2v1AABdAQaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMgaW5EABBBkgERbxYBAp0DgmNvbnRpbnVlowMgc2/UAFBhIG1peCYBACYAAXIAUG1lbG9kjAEAtQFgc3VycHJpBwKRCgkJaGFybW9uwwFBcmVtaYYCAB4BIHJ5FgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQIRdI8AMHJlJ+MDsWFsd2F5cyByb29t+QGwYSBuZXcgbm90ZS4=",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwAQcxsAMQoJCR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKhIGVjaG9lZCBieYgA8gBjb25zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQU5lYXIwANBjZW50cmFsIHBhcmsscwCjbGRyZW4gcGxheesBAf0AIGdhiwACewJQcGFyZW6rAXBuY2UgZGlk8gJQbGF1Z2gCAQDnAUBjaGFzDAAAwQLzASBvdGhlciBpbiBjaXJjbGUPAfAVbWVycnktZ28tcm91bmQgc3B1biwgY2FycnlpbmcKCQlnaWdnSwEATwBAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBAdHVuZXcAIXJ5fQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQDxA3RyYW5zZm9ybWVkLCByZXZlYccEALEAwW1hZ2ljIGhpZGRlbk0DIWlu5wAAkgESbxgDAZ0DgmNvbnRpbnVlowMgc2/UAFBhIG1peCYBACYAAXIAUG1lbG9kjAEAtQFgc3VycHJpBwKRCgkJaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgEgbWE3AiBvbrkCE3SlARAn4wOxYWx3YXlzIHJvb235AbBhIG5ldyBub3RlLg==",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKhIGVjaG9lZCBieYgA8gBjb25zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKhIGVjaG9lZCBieYgA8gBjb25zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKiIGVjaG9lZCBieVkB4m9uc2lzdGVudCBjaGltTgAAGQDCbmVhcmJ5IGNsb2NrcgKwLCBhCgkJcmVsaWMxAhFtJwAAXQHBLCBzdGlsbCB0aWNr8AACDwCAc3RhbmRpbmd4AUJOZWFycADAZW50cmFsIHBhcmsscwCjbGRyZW4gcGxheesBAf0AIGdhiwACewJQcGFyZW6rAXBuY2UgZGlk8gJQbGF1Z2gCAQDnAUBjaGFzDAAAwQLzASBvdGhlciBpbiBjaXJjbGUPAfAVbWVycnktZ28tcm91bmQgc3B1biwgY2FycnlpbmcKCQlnaWdnSwEATwBAbWVtbzACYCwgc3BpbsIBBpgABBwAAcQCoWdlbmVyYXRpb25cAoBCdXQgZXZlbn0ASHRoaXNOAiBkYb0AYm9mIGxpZgICInJljwEybW9t3gBxZiB1bmlxdXoCMHV0eVIAE0G+A6EgbXVzaWNpYW4sKQEJkgBAdHVuZXcAIXJ5fQABgAEgd2EuAQB2AGJ5IGpvaW7vAQC+AXB2aW9saW5ptAFBY3JlYTYEoGEgbWVzbWVyaXoOADNkdWX4AmJzdG9wcGWZAlJlcnNiedkAAJMBVXRyYWNrUQMGiAAAeQDxA3RyYW5zZm9ybWVkLCByZXZlYccEALEAwW1hZ2ljIGhpZGRlbk0DIWlu5wAAkgESbxgDAZ0DgmNvbnRpbnVlowMhc29EA0QgbWl4nQIDjAEwbG9kjAEAtQFgc3VycHJpBwKRCgkJaGFybW9uwwFBcmVtaYYCAiQBABYBAd0AgHdoaWxlIHNvugAASQIArgEgbWE3AiBvbrkCE3SlARAn4wOxYWx3YXlzIHJvb235AbBhIG5ldyBub3RlLg==",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
			"8QBJbiB0aGUgaGVhcnQgb2YNAPAhYnVzdGxpbmcgY2l0eSwgc2t5c2NyYXBlcnMgdG93ZXJlZCBhYm92ZSwKCQljYXN0KwCSc2hhZG93cyBvUADzM2J1c3kgc3RyZWV0cyBiZWxvdy4gUGVvcGxlIGh1cnJpZWQgdG8gYW5kIGZybywgZWFjaAoJCXdpdGggYSBzdG9yeY0A4WlyIG93bi4gQW1pZHN0XADRdXJiYW4ganVuZ2xlLBIAlHNhbWUgY2FmZX8AwGNvcm5lcgoJCWJlYxwA8QphIGJlYWNvbiBmb3IgbWFueS4gTG9jYWxzgwDwCHRvdXJpc3RzIGFsaWtlIGZyZXF1ZW50pAAATAAGWAAA8AABWgBwLCBkcmF3bsQAEGk4AMJyb21hdGljIGJyZXdUAPAEZnJlc2ggcGFzdHJpZXMuCgkJVEwAcWl0eSBoYWQ2APAJb3duIHJoeXRobSwgYSByZXBldGl0aXZlrAAA6gCQYXQgcmVzb25higABGwEAjwDhZm9vdHN0ZXBzCgkJb2ZJAPARaW5oYWJpdGFudHMuIEV2ZXJ5IG1vcm5pbmcsIGFzIGSqAEhicm9rLgHAam9nZ2VyIHdvdWxkpwATc+AAAR0AgG9sZCBvYWsgwAERLGMA4GxlYXZlcyB3aGlzcGVy8QFQdGFsZXOlAdB5ZXN0ZXJ5ZWFycy4g5QAC1ABVaWMKCQmtABAgNwKjIGVjaG9lZCBieaUB0m5zaXN0ZW50IGNoaW1OAAAZAMJuZWFyYnkgY2xvY2tyArAsIGEKCQlyZWxpYzECEW0nAABdAcEsIHN0aWxsIHRpY2vwAAIPAIBzdGFuZGluZ3gBQk5lYXJwAMBlbnRyYWwgcGFyayxzAKNsZHJlbiBwbGF56wEB/QAgZ2GLAAJ7AlBwYXJlbqsBcG5jZSBkaWTyAlBsYXVnaAIBAOcBQGNoYXMMAADBAvMBIG90aGVyIGluIGNpcmNsZQ8B8BVtZXJyeS1nby1yb3VuZCBzcHVuLCBjYXJyeWluZwoJCWdpZ2dLAQBPAEBtZW1vMAJgLCBzcGluwgEGmAAEHAABxAKhZ2VuZXJhdGlvblwCgEJ1dCBldmVufQBIdGhpc04CIGRhvQBib2YgbGlmAgIicmWPATJtb23eAHFmIHVuaXF1egIwdXR5UgATQb4DoSBtdXNpY2lhbiwpAQmSAEB0dW5ldwAhcnl9AAGAASB3YS4BAHYAYnkgam9pbu8BAL4BcHZpb2xpbmm0AUFjcmVhNgSgYSBtZXNtZXJpeg4AM2R1ZfgCYnN0b3BwZZkCUmVyc2J52QAAkwFVdHJhY2tRAwaIAAB5APEDdHJhbnNmb3JtZWQsIHJldmVhxwQAsQDBbWFnaWMgaGlkZGVuTQMhaW7nAACSARJvGAMBnQOCY29udGludWWjAyFzb0QDRCBtaXidAgOMATBsb2SMAQC1AWBzdXJwcmkHApEKCQloYXJtb27DAUFyZW1phgICJAEAFgEB3QCAd2hpbGUgc2+6AABJAgCuASBtYTcCIG9uuQITdKUBECfjA7FhbHdheXMgcm9vbfkBsGEgbmV3IG5vdGUu",
		},
	},
}

func TestType(t *testing.T) {
	enc := New()
	if enc.Type() != encoders.EncoderTypeLZ4 {
		t.Fatalf("unexpected encoder type, want `%s`, have `%s`", encoders.EncoderTypeLZ4, enc.Type())
	}
}

func TestEmpty(t *testing.T) {
	roundtrip(t, "", defaultCompressionLevel)
	decompress(t, "AA==", "")
}

func TestSingleCharacter(t *testing.T) {
	roundtrip(t, "0", defaultCompressionLevel)
	decompress(t, "EDA=", "0")
}

func TestCompressUncompress(t *testing.T) {
	for tn, tc := range testCases {
		for i := 1; i <= MaxCompressionLevel; i++ {
			t.Run(fmt.Sprintf("case %d level %d", tn, i), func(t *testing.T) {
				roundtrip(t, tc.uncompressed, i)
			})
		}
	}
}

func TestDecompress(t *testing.T) {
	for tn, tc := range testCases {
		for i := 0; i < len(tc.compressed); i++ {
			t.Run(fmt.Sprintf("case %d level %d", tn, i+1), func(t *testing.T) {
				decompress(t, tc.compressed[i], tc.uncompressed)
			})
		}
	}
}

func roundtrip(t *testing.T, uncompressed string, level int) {
	in := []byte(uncompressed)
	out := make([]byte, 0)

	enc := New(WithCompressionLevel(level))
	buf := bytes.NewBuffer(nil)
	n, err := enc.Compress(in, out, buf)
	if err != nil {
		t.Fatalf("failed to compress: %s", err)
	}

	// fmt.Println(n, buf.Bytes()[:n])
	// fmt.Printf("\"%s\",\n", base64.StdEncoding.EncodeToString(buf.Bytes()[:n]))

	out = make([]byte, len(in))
	n, err = enc.Decompress(buf.Bytes()[:n], out, bytes.NewBuffer(buf.Bytes()[:n]))
	if err != nil {
		t.Fatalf("failed to decompress: %s", err)
	}
	if string(out[:n]) != uncompressed {
		t.Fatalf("mismatch detected after compression roundtrip, want `%s`, have `%s`", uncompressed, string(out[:n]))
	}
	if err := enc.Close(); err != nil {
		t.Fatalf("failed to close encoder: %s", err)
	}
}

func decompress(t *testing.T, compressed, expectedUncompressed string) {
	in, err := base64.StdEncoding.DecodeString(compressed)
	if err != nil {
		t.Fatal(err)
	}
	out := make([]byte, len(expectedUncompressed))

	dec := New()
	n, err := dec.Decompress(in, out, bytes.NewBuffer(in))
	if err != nil {
		t.Fatalf("failed to decompress: %s", err)
	}
	if string(out[:n]) != expectedUncompressed {
		t.Fatalf("mismatch detected after decompression of known compressed data, want `%s`, have `%s`", expectedUncompressed, string(out[:n]))
	}
	if err := dec.Close(); err != nil {
		t.Fatalf("failed to close decoder: %s", err)
	}
}
