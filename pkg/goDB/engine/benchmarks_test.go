// Code generated by benchgen/main.go; DO NOT EDIT
package engine

import (
	"bytes"
	"context"
	"os/exec"
	"testing"

	"github.com/els0r/goProbe/pkg/query"
	"github.com/els0r/goProbe/pkg/types"
	"github.com/els0r/telemetry/logging"
)

// Pre-defined Benchmarks
// The filesystem cache is flushed after every run of the queryto ensure that
// I/O is properly accounted for

func BenchmarkStdQueryJSONOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
			query.WithFormat(types.FormatJSON),
		}...,
	)

	flushCaches()

	_ = buf
}

func BenchmarkStdQueryJSONOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
			query.WithFormat(types.FormatJSON),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryTableOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutput(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
			query.WithFormat(types.FormatCSV),
		}...,
	)

	_ = buf
}

func BenchmarkStdQueryCSVOutputCondition(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, flushCaches,
		"eth1", "time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(query.MaxResults),
			query.WithCondition("dport eq 443"),
			query.WithFormat(types.FormatCSV),
		}...,
	)

	_ = buf
}

func benchQuery(b *testing.B, buf *bytes.Buffer, flushFunc func(), iface, queryStr string,
	opts ...query.Option) {
	for n := 0; n < b.N; n++ {

		// prepare query
		args := query.NewArgs(queryStr, iface, opts...).AddOutputs(buf)
		// run query
		_, err := NewQueryRunner(TestDB).Run(context.Background(), args)
		if err != nil {
			b.Fatalf("error during execute: %s", err)
		}

		buf.Reset()

		if flushFunc != nil {
			flushFunc()
		}
	}
}

func flushCaches() {
	var log = logging.Logger()

	// call arch specific implementation
	cmd := exec.Command(syncCmd[0], syncCmd[1:]...)
	err := cmd.Start()
	if err != nil {
		log.Error(err)
	}
	err = cmd.Wait()
	if err != nil {
		log.Error(err)
	}
}

// AUTO-GENERATED COMBINATIONS
// These benchmarks provide most input combinations to the query engines. They are
// meant for assessing the performance of specific DB accesses (e.g. long queries vs.
// short, convoluted conditions vs. none, etc.)
//
// Each benchmark follows a naming convention that allows easy selection of a subset when
// invoking "go run":
//      Benchmark + "IDENT" + q + "QUERYTYPE" + i + "IFACENAME" + n + "NUMRESULTS"
//                + o + "OUTPUTFORMAT" + c + "CONDITIONSIZE"
//
// Parameters are written ALL CAPS. IDENT can be one of the following:
//  - STD: runs bencharks with file system cache flush enabled (to test the whole pipeline)
//  - NF: doesn't flush the file system cache after every run
//
// Example: select all benchmarks running queries on eth1
//      go test -v -bench -run=BenchmarkNFqSIPDIPiETH1

// Benchmarks (AUTO-GENERATED, DO NOT EDIT)

// Benchmark: 1, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3, Query: sip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 5, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 6, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 7, Query: sip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 9, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 10, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 11, Query: sip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 13, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 14, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 15, Query: sip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 18, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 19, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 20, Query: sip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 22, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 23, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 24, Query: sip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 26, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 27, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 28, Query: sip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 30, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 31, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 32, Query: sip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 35, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 36, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 37, Query: sip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 39, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 40, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 41, Query: sip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 43, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 44, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 45, Query: sip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 47, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 48, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 49, Query: sip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 52, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 53, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 54, Query: sip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 56, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 57, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 58, Query: sip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 60, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 61, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 62, Query: sip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 64, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 65, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 66, Query: sip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 69, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 70, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 71, Query: sip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 73, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 74, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 75, Query: sip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 77, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 78, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 79, Query: sip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 81, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 82, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 83, Query: sip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 87, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 88, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 89, Query: sip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 91, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 92, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 93, Query: sip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 95, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 96, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 97, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 99, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 100, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 101, Query: sip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 104, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 105, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 106, Query: sip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 108, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 109, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 110, Query: sip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 112, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 113, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 114, Query: sip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 116, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 117, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 118, Query: sip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 121, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 122, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 123, Query: sip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 125, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 126, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 127, Query: sip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 129, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 130, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 131, Query: sip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 133, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 134, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 135, Query: sip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 138, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 139, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 140, Query: sip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 142, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 143, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 144, Query: sip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 146, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 147, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 148, Query: sip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 150, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 151, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 152, Query: sip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 155, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 156, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 157, Query: sip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 159, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 160, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 161, Query: sip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 163, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 164, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 165, Query: sip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 167, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 168, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 169, Query: sip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 173, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 174, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 175, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 177, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 178, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 179, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 181, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 182, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 183, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 185, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 186, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 187, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 190, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 191, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 192, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 194, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 195, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 196, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 198, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 199, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 200, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 202, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 203, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 204, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 207, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 208, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 209, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 211, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 212, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 213, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 215, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 216, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 217, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 219, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 220, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 221, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 224, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 225, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 226, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 228, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 229, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 230, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 232, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 233, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 234, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 236, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 237, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 238, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 241, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 242, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 243, Query: sip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 245, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 246, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 247, Query: sip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 249, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 250, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 251, Query: sip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 253, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 254, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 255, Query: sip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 259, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 260, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 261, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 263, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 264, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 265, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 267, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 268, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 269, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 271, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 272, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 273, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 276, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 277, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 278, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 280, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 281, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 282, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 284, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 285, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 286, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 288, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 289, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 290, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 293, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 294, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 295, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 297, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 298, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 299, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 301, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 302, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 303, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 305, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 306, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 307, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 310, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 311, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 312, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 314, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 315, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 316, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 318, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 319, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 320, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 322, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 323, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 324, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 327, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 328, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 329, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 331, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 332, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 333, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 335, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 336, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 337, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 339, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 340, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 341, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 345, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 346, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 347, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 349, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 350, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 351, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 353, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 354, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 355, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 357, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 358, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 359, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 362, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 363, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 364, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 366, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 367, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 368, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 370, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 371, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 372, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 374, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 375, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 376, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 379, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 380, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 381, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 383, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 384, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 385, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 387, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 388, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 389, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 391, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 392, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 393, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 396, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 397, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 398, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 400, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 401, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 402, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 404, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 405, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 406, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 408, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 409, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 410, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 413, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 414, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 415, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 417, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 418, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 419, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 421, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 422, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 423, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 425, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 426, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 427, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 431, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 432, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 433, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 435, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 436, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 437, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 439, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 440, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 441, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 443, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 444, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 445, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 448, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 449, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 450, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 452, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 453, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 454, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 456, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 457, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 458, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 460, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 461, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 462, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 465, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 466, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 467, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 469, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 470, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 471, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 473, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 474, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 475, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 477, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 478, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 479, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 482, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 483, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 484, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 486, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 487, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 488, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 490, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 491, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 492, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 494, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 495, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 496, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 499, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 500, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 501, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 503, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 504, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 505, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 507, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 508, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 509, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 511, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 512, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 513, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 517, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 518, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 519, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 521, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 522, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 523, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 525, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 526, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 527, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 529, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 530, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 531, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 534, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 535, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 536, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 538, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 539, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 540, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 542, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 543, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 544, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 546, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 547, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 548, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 551, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 552, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 553, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 555, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 556, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 557, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 559, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 560, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 561, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 563, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 564, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 565, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 568, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 569, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 570, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 572, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 573, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 574, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 576, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 577, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 578, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 580, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 581, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 582, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 585, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 586, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 587, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 589, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 590, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 591, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 593, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 594, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 595, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 597, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 598, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 599, Query: sip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 604, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 605, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 606, Query: sip,dip, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 608, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 609, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 610, Query: sip,dip, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 612, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 613, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 614, Query: sip,dip, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 616, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 617, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 618, Query: sip,dip, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 621, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 622, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 623, Query: sip,dip, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 625, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 626, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 627, Query: sip,dip, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 629, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 630, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 631, Query: sip,dip, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 633, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 634, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 635, Query: sip,dip, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 638, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 639, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 640, Query: sip,dip, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 642, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 643, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 644, Query: sip,dip, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 646, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 647, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 648, Query: sip,dip, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 650, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 651, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 652, Query: sip,dip, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 655, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 656, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 657, Query: sip,dip, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 659, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 660, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 661, Query: sip,dip, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 663, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 664, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 665, Query: sip,dip, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 667, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 668, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 669, Query: sip,dip, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 672, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 673, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 674, Query: sip,dip, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 676, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 677, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 678, Query: sip,dip, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 680, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 681, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 682, Query: sip,dip, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 684, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 685, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 686, Query: sip,dip, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 690, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 691, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 692, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 694, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 695, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 696, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 698, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 699, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 700, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 702, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 703, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 704, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 707, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 708, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 709, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 711, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 712, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 713, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 715, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 716, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 717, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 719, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 720, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 721, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 724, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 725, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 726, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 728, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 729, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 730, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 732, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 733, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 734, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 736, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 737, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 738, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 741, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 742, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 743, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 745, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 746, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 747, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 749, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 750, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 751, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 753, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 754, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 755, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 758, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 759, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 760, Query: sip,dip, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 762, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 763, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 764, Query: sip,dip, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 766, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 767, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 768, Query: sip,dip, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 770, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 771, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 772, Query: sip,dip, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 776, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 777, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 778, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 780, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 781, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 782, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 784, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 785, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 786, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 788, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 789, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 790, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 793, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 794, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 795, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 797, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 798, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 799, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 801, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 802, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 803, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 805, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 806, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 807, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 810, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 811, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 812, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 814, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 815, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 816, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 818, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 819, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 820, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 822, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 823, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 824, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 827, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 828, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 829, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 831, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 832, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 833, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 835, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 836, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 837, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 839, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 840, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 841, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 844, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 845, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 846, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 848, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 849, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 850, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 852, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 853, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 854, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 856, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 857, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 858, Query: sip,dip, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 862, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 863, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 864, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 866, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 867, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 868, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 870, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 871, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 872, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 874, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 875, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 876, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 879, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 880, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 881, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 883, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 884, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 885, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 887, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 888, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 889, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 891, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 892, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 893, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 896, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 897, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 898, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 900, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 901, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 902, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 904, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 905, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 906, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 908, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 909, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 910, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 913, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 914, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 915, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 917, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 918, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 919, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 921, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 922, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 923, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 925, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 926, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 927, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 930, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 931, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 932, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 934, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 935, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 936, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 938, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 939, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 940, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 942, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 943, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 944, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 948, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 949, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 950, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 952, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 953, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 954, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 956, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 957, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 958, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 960, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 961, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 962, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 965, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 966, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 967, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 969, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 970, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 971, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 973, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 974, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 975, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 977, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 978, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 979, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 982, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 983, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 984, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 986, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 987, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 988, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 990, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 991, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 992, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 994, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 995, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 996, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 999, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1000, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1001, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1003, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1004, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1005, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1007, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1008, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1009, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1011, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1012, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1013, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1016, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1017, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1018, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1020, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1021, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1022, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1024, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1025, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1026, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1028, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1029, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1030, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1034, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1035, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1036, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1038, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1039, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1040, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1042, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1043, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1044, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1046, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1047, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1048, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1051, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1052, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1053, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1055, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1056, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1057, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1059, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1060, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1061, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1063, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1064, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1065, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1068, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1069, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1070, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1072, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1073, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1074, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1076, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1077, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1078, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1080, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1081, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1082, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1085, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1086, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1087, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1089, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1090, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1091, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1093, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1094, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1095, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1097, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1098, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1099, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1102, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1103, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1104, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1106, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1107, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1108, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1110, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1111, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1112, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1114, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1115, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1116, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1120, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1121, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1122, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1124, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1125, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1126, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1128, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1129, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1130, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1132, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1133, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1134, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1137, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1138, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1139, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1141, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1142, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1143, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1145, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1146, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1147, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1149, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1150, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1151, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1154, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1155, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1156, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1158, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1159, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1160, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1162, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1163, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1164, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1166, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1167, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1168, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1171, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1172, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1173, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1175, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1176, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1177, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1179, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1180, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1181, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1183, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1184, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1185, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1188, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1189, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1190, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1192, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1193, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1194, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1196, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1197, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1198, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1200, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1201, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1202, Query: sip,dip, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1207, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1208, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1209, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1211, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1212, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1213, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1215, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1216, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1217, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1219, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1220, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1221, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1224, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1225, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1226, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1228, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1229, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1230, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1232, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1233, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1234, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1236, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1237, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1238, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1241, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1242, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1243, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1245, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1246, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1247, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1249, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1250, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1251, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1253, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1254, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1255, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1258, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1259, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1260, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1262, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1263, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1264, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1266, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1267, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1268, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1270, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1271, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1272, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1275, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1276, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1277, Query: sip,dip,dport, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1279, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1280, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1281, Query: sip,dip,dport, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1283, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1284, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1285, Query: sip,dip,dport, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1287, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1288, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1289, Query: sip,dip,dport, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1293, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1294, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1295, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1297, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1298, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1299, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1301, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1302, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1303, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1305, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1306, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1307, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1310, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1311, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1312, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1314, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1315, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1316, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1318, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1319, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1320, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1322, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1323, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1324, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1327, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1328, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1329, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1331, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1332, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1333, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1335, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1336, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1337, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1339, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1340, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1341, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1344, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1345, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1346, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1348, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1349, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1350, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1352, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1353, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1354, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1356, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1357, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1358, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1361, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1362, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1363, Query: sip,dip,dport, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1365, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1366, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1367, Query: sip,dip,dport, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1369, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1370, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1371, Query: sip,dip,dport, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1373, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1374, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1375, Query: sip,dip,dport, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1379, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1380, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1381, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1383, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1384, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1385, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1387, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1388, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1389, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1391, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1392, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1393, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1396, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1397, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1398, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1400, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1401, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1402, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1404, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1405, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1406, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1408, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1409, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1410, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1413, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1414, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1415, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1417, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1418, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1419, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1421, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1422, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1423, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1425, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1426, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1427, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1430, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1431, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1432, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1434, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1435, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1436, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1438, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1439, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1440, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1442, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1443, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1444, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1447, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1448, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1449, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1451, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1452, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1453, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1455, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1456, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1457, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1459, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1460, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1461, Query: sip,dip,dport, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1465, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1466, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1467, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1469, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1470, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1471, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1473, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1474, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1475, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1477, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1478, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1479, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1482, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1483, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1484, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1486, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1487, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1488, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1490, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1491, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1492, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1494, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1495, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1496, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1499, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1500, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1501, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1503, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1504, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1505, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1507, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1508, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1509, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1511, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1512, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1513, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1516, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1517, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1518, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1520, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1521, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1522, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1524, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1525, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1526, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1528, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1529, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1530, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1533, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1534, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1535, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1537, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1538, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1539, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1541, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1542, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1543, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1545, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1546, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1547, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1551, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1552, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1553, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1555, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1556, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1557, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1559, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1560, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1561, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1563, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1564, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1565, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1568, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1569, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1570, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1572, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1573, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1574, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1576, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1577, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1578, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1580, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1581, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1582, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1585, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1586, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1587, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1589, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1590, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1591, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1593, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1594, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1595, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1597, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1598, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1599, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1602, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1603, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1604, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1606, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1607, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1608, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1610, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1611, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1612, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1614, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1615, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1616, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1619, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1620, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1621, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1623, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1624, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1625, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1627, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1628, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1629, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1631, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1632, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1633, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1637, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1638, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1639, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1641, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1642, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1643, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1645, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1646, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1647, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1649, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1650, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1651, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1654, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1655, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1656, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1658, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1659, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1660, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1662, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1663, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1664, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1666, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1667, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1668, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1671, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1672, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1673, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1675, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1676, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1677, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1679, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1680, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1681, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1683, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1684, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1685, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1688, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1689, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1690, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1692, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1693, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1694, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1696, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1697, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1698, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1700, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1701, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1702, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1705, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1706, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1707, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1709, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1710, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1711, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1713, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1714, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1715, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1717, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1718, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1719, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1723, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1724, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1725, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1727, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1728, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1729, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1731, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1732, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1733, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1735, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1736, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1737, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1740, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1741, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1742, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1744, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1745, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1746, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1748, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1749, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1750, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1752, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1753, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1754, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1757, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1758, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1759, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1761, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1762, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1763, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1765, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1766, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1767, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1769, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1770, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1771, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1774, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1775, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1776, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1778, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1779, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1780, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1782, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1783, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1784, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1786, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1787, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1788, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1791, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1792, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1793, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1795, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1796, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1797, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1799, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1800, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1801, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1803, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1804, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1805, Query: sip,dip,dport, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1810, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1811, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1812, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1814, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1815, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1816, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1818, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1819, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1820, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1822, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1823, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1824, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1827, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1828, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1829, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1831, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1832, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1833, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1835, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1836, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1837, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1839, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1840, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1841, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1844, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1845, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1846, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1848, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1849, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1850, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1852, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1853, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1854, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1856, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1857, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1858, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1861, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1862, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1863, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1865, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1866, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1867, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1869, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1870, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1871, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1873, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1874, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1875, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1878, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1879, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1880, Query: sip,dip,dport,proto, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1882, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1883, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1884, Query: sip,dip,dport,proto, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1886, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1887, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1888, Query: sip,dip,dport,proto, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1890, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1891, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1892, Query: sip,dip,dport,proto, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1896, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1897, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1898, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1900, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1901, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1902, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1904, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1905, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1906, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1908, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1909, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1910, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1913, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1914, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1915, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1917, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1918, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1919, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1921, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1922, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1923, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1925, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1926, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1927, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1930, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1931, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1932, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1934, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1935, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1936, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1938, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1939, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1940, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1942, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1943, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1944, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1947, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1948, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1949, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1951, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1952, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1953, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1955, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1956, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1957, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1959, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1960, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1961, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1964, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1965, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1966, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1968, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1969, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1970, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1972, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1973, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1974, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1976, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1977, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1978, Query: sip,dip,dport,proto, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1982, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1983, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1984, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 1986, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1987, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1988, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 1990, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1991, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1992, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 1994, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1995, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1996, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 1999, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2000, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2001, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2003, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2004, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2005, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2007, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2008, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2009, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2011, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2012, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2013, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2016, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2017, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2018, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2020, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2021, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2022, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2024, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2025, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2026, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2028, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2029, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2030, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2033, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2034, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2035, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2037, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2038, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2039, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2041, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2042, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2043, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2045, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2046, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2047, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2050, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2051, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2052, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2054, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2055, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2056, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2058, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2059, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2060, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2062, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2063, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2064, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2068, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2069, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2070, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2072, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2073, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2074, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2076, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2077, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2078, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2080, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2081, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2082, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2085, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2086, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2087, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2089, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2090, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2091, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2093, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2094, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2095, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2097, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2098, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2099, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2102, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2103, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2104, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2106, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2107, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2108, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2110, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2111, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2112, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2114, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2115, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2116, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2119, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2120, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2121, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2123, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2124, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2125, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2127, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2128, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2129, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2131, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2132, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2133, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2136, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2137, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2138, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2140, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2141, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2142, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2144, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2145, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2146, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2148, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2149, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2150, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2154, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2155, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2156, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2158, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2159, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2160, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2162, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2163, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2164, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2166, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2167, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2168, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2171, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2172, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2173, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2175, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2176, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2177, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2179, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2180, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2181, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2183, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2184, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2185, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2188, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2189, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2190, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2192, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2193, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2194, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2196, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2197, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2198, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2200, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2201, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2202, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2205, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2206, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2207, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2209, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2210, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2211, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2213, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2214, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2215, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2217, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2218, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2219, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2222, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2223, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2224, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2226, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2227, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2228, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2230, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2231, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2232, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2234, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2235, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2236, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2240, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2241, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2242, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2244, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2245, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2246, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2248, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2249, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2250, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2252, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2253, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2254, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2257, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2258, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2259, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2261, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2262, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2263, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2265, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2266, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2267, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2269, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2270, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2271, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2274, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2275, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2276, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2278, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2279, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2280, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2282, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2283, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2284, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2286, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2287, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2288, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2291, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2292, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2293, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2295, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2296, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2297, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2299, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2300, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2301, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2303, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2304, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2305, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2308, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2309, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2310, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2312, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2313, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2314, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2316, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2317, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2318, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2320, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2321, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2322, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2326, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2327, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2328, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2330, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2331, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2332, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2334, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2335, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2336, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2338, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2339, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2340, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2343, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2344, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2345, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2347, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2348, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2349, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2351, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2352, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2353, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2355, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2356, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2357, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2360, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2361, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2362, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2364, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2365, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2366, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2368, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2369, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2370, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2372, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2373, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2374, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2377, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2378, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2379, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2381, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2382, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2383, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2385, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2386, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2387, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2389, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2390, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2391, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2394, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2395, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2396, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2398, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2399, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2400, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2402, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2403, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2404, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2406, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2407, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2408, Query: sip,dip,dport,proto, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2413, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2414, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2415, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2417, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2418, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2419, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2421, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2422, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2423, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2425, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2426, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2427, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2430, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2431, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2432, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2434, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2435, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2436, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2438, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2439, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2440, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2442, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2443, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2444, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2447, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2448, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2449, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2451, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2452, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2453, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2455, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2456, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2457, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2459, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2460, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2461, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2464, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2465, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2466, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2468, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2469, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2470, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2472, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2473, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2474, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2476, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2477, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2478, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2481, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2482, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2483, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2485, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2486, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2487, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2489, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2490, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2491, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2493, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2494, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2495, Query: sip,dip,dport,proto,time, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2499, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2500, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2501, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2503, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2504, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2505, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2507, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2508, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2509, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2511, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2512, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2513, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2516, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2517, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2518, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2520, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2521, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2522, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2524, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2525, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2526, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2528, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2529, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2530, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2533, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2534, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2535, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2537, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2538, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2539, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2541, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2542, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2543, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2545, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2546, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2547, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2550, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2551, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2552, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2554, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2555, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2556, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2558, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2559, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2560, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2562, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2563, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2564, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2567, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2568, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2569, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2571, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2572, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2573, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2575, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2576, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2577, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2579, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2580, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2581, Query: sip,dip,dport,proto,time, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2585, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2586, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2587, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2589, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2590, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2591, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2593, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2594, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2595, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2597, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2598, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2599, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2602, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2603, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2604, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2606, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2607, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2608, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2610, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2611, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2612, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2614, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2615, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2616, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2619, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2620, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2621, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2623, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2624, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2625, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2627, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2628, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2629, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2631, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2632, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2633, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2636, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2637, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2638, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2640, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2641, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2642, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2644, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2645, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2646, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2648, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2649, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2650, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2653, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2654, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2655, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2657, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2658, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2659, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2661, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2662, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2663, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2665, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2666, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2667, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2671, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2672, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2673, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2675, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2676, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2677, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2679, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2680, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2681, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2683, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2684, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2685, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2688, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2689, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2690, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2692, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2693, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2694, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2696, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2697, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2698, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2700, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2701, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2702, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2705, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2706, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2707, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2709, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2710, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2711, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2713, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2714, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2715, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2717, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2718, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2719, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2722, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2723, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2724, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2726, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2727, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2728, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2730, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2731, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2732, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2734, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2735, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2736, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2739, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2740, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2741, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2743, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2744, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2745, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2747, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2748, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2749, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2751, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2752, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2753, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2757, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2758, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2759, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2761, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2762, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2763, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2765, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2766, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2767, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2769, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2770, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2771, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2774, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2775, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2776, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2778, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2779, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2780, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2782, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2783, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2784, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2786, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2787, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2788, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2791, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2792, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2793, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2795, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2796, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2797, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2799, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2800, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2801, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2803, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2804, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2805, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2808, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2809, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2810, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2812, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2813, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2814, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2816, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2817, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2818, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2820, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2821, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2822, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2825, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2826, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2827, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2829, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2830, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2831, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2833, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2834, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2835, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2837, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2838, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2839, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2843, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2844, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2845, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2847, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2848, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2849, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2851, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2852, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2853, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2855, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2856, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2857, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2860, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2861, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2862, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2864, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2865, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2866, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2868, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2869, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2870, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2872, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2873, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2874, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2877, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2878, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2879, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2881, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2882, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2883, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2885, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2886, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2887, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2889, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2890, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2891, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2894, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2895, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2896, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2898, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2899, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2900, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2902, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2903, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2904, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2906, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2907, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2908, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2911, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2912, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2913, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2915, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2916, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2917, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2919, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2920, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2921, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2923, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2924, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2925, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2929, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2930, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2931, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2933, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2934, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2935, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2937, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2938, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2939, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2941, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2942, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2943, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2946, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2947, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2948, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2950, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2951, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2952, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2954, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2955, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2956, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2958, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2959, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2960, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2963, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2964, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2965, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2967, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2968, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2969, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2971, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2972, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2973, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2975, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2976, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2977, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2980, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2981, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2982, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2984, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2985, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2986, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 2988, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2989, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2990, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 2992, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2993, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2994, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 2997, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2998, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 2999, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3001, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3002, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3003, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3005, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3006, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3007, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3009, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3010, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3011, Query: sip,dip,dport,proto,time, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3016, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3017, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3018, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3020, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3021, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3022, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3024, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3025, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3026, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3028, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3029, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3030, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3033, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3034, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3035, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3037, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3038, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3039, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3041, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3042, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3043, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3045, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3046, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3047, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3050, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3051, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3052, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3054, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3055, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3056, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3058, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3059, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3060, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3062, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3063, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3064, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3067, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3068, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3069, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3071, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3072, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3073, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3075, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3076, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3077, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3079, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3080, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3081, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3084, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3085, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3086, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3088, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3089, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3090, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3092, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3093, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3094, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3096, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3097, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3098, Query: sip,dip,dport,proto,time,iface, Iface: eth0, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3102, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3103, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3104, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3106, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3107, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3108, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3110, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3111, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3112, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3114, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3115, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3116, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3119, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3120, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3121, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3123, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3124, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3125, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3127, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3128, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3129, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3131, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3132, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3133, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3136, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3137, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3138, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3140, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3141, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3142, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3144, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3145, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3146, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3148, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3149, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3150, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3153, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3154, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3155, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3157, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3158, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3159, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3161, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3162, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3163, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3165, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3166, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3167, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3170, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3171, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3172, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3174, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3175, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3176, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3178, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3179, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3180, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3182, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3183, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3184, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3188, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3189, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3190, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3192, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3193, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3194, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3196, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3197, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3198, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3200, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3201, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3202, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3205, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3206, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3207, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3209, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3210, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3211, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3213, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3214, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3215, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3217, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3218, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3219, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3222, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3223, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3224, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3226, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3227, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3228, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3230, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3231, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3232, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3234, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3235, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3236, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3239, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3240, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3241, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3243, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3244, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3245, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3247, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3248, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3249, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3251, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3252, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3253, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3256, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3257, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3258, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3260, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3261, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3262, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3264, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3265, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3266, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3268, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3269, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3270, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3274, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3275, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3276, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3278, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3279, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3280, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3282, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3283, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3284, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3286, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3287, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3288, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3291, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3292, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3293, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3295, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3296, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3297, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3299, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3300, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3301, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3303, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3304, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3305, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3308, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3309, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3310, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3312, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3313, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3314, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3316, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3317, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3318, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3320, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3321, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3322, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3325, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3326, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3327, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3329, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3330, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3331, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3333, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3334, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3335, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3337, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3338, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3339, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3342, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3343, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3344, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3346, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3347, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3348, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3350, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3351, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3352, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3354, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3355, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3356, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3360, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3361, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3362, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3364, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3365, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3366, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3368, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3369, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3370, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3372, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3373, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3374, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3377, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3378, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3379, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3381, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3382, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3383, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3385, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3386, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3387, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3389, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3390, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3391, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3394, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3395, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3396, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3398, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3399, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3400, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3402, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3403, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3404, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3406, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3407, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3408, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3411, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3412, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3413, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3415, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3416, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3417, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3419, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3420, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3421, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3423, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3424, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3425, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3428, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3429, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3430, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3432, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3433, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3434, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3436, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3437, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3438, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3440, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3441, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3442, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3446, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3447, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3448, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3450, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3451, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3452, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3454, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3455, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3456, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3458, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3459, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3460, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3463, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3464, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3465, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3467, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3468, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3469, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3471, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3472, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3473, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3475, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3476, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3477, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3480, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3481, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3482, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3484, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3485, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3486, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3488, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3489, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3490, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3492, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3493, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3494, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3497, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3498, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3499, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3501, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3502, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3503, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3505, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3506, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3507, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3509, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3510, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3511, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1n1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3514, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3515, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3516, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3518, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3519, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3520, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3522, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3523, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3524, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3526, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3527, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3528, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1nBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3532, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3533, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3534, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3536, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3537, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3538, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3540, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3541, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3542, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3544, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3545, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3546, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3549, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3550, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3551, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3553, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3554, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3555, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3557, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3558, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3559, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3561, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3562, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3563, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 10
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn10oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(10),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3566, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3567, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3568, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3570, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3571, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3572, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3574, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3575, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3576, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3578, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3579, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3580, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 100
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn100oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(100),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3583, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3584, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3585, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3587, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3588, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3589, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3591, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3592, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3593, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3595, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3596, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3597, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 1000
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEn1000oTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(1000),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3600, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3601, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3602, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: single, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcSINGLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443"),
		}...,
	)

	_ = buf
}

// Benchmark: 3604, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3605, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3606, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: double, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcDOUBLE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("dport eq 443 and proto eq tcp"),
		}...,
	)

	_ = buf
}

// Benchmark: 3608, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3609, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3610, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: nested, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNESTED(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition("((dport eq 443 || dport eq 80) and dport neq 8080) and ! (dnet eq 127.0.0.0/8 or dnet eq 10.0.0.0/8 or dnet eq 172.16.0.0/12 or dnet eq 192.168.0.0/16)"),
		}...,
	)

	_ = buf
}

// Benchmark: 3612, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoCSVcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3613, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoJSONcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}

// Benchmark: 3614, Query: sip,dip,dport,proto,time,iface, Iface: eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde, Condition: none, N: 9999999999999999
func BenchmarkNFqSIPDIPDPORTPROTOTIMEIFACEiETH0ETH1ETH2T_C1_FWDET_C1_FWDE1TUN_3G_C1_FW1TUN_3G_C1_FWDEnBIGoTXTcNONE(b *testing.B) {

	buf := &bytes.Buffer{}

	benchQuery(b, buf, nil,
		"eth0,eth1,eth2,t_c1_fwde,t_c1_fwde1,tun_3g_c1_fw1,tun_3g_c1_fwde", "sip,dip,dport,proto,time,iface",
		[]query.Option{
			query.WithFirst("0"),
			query.WithNumResults(9999999999999999),
			query.WithCondition(""),
		}...,
	)

	_ = buf
}
