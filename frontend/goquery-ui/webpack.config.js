const path = require('path')
const fs = require('fs')
const webpack = require('webpack')
const dotenv = require('dotenv')
const HtmlWebpackPlugin = require('html-webpack-plugin')

const mode = process.env.NODE_ENV === 'production' ? 'production' : 'development'
const envFile = `.env.${mode}`
const envPath = path.resolve(__dirname, envFile)
if (fs.existsSync(envPath)) {
  dotenv.config({ path: envPath })
}
// allow overriding via direct environment variable export
const GQ_API_BASE_URL = process.env.GQ_API_BASE_URL || (mode === 'production' ? 'https://global-query.prod.local' : 'http://localhost:8145')

module.exports = {
  context: __dirname,
  mode,
  entry: path.resolve(__dirname, 'src/index.tsx'),
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js',
  publicPath: '/',
    clean: true,
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js'],
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: [
          {
            loader: 'ts-loader',
            options: {
              transpileOnly: true,
              configFile: path.resolve(__dirname, 'tsconfig.json'),
            },
          },
        ],
        exclude: /node_modules/,
      },
      {
        test: /\.css$/,
        use: [
          'style-loader',
          {
            loader: 'css-loader',
            options: { importLoaders: 1 }
          },
          'postcss-loader'
        ]
      }
    ],
  },
  plugins: [
    new webpack.DefinePlugin({
      'process.env.GQ_API_BASE_URL': JSON.stringify(GQ_API_BASE_URL),
      'process.env.NODE_ENV': JSON.stringify(mode),
    }),
    new HtmlWebpackPlugin({
      template: path.resolve(__dirname, 'index.html'),
      inject: 'body',
      scriptLoading: 'defer',
      filename: 'index.html',
    })
  ],
  devtool: mode === 'production' ? 'source-map' : 'eval-source-map',
  stats: 'minimal',
  devServer: {
    host: '0.0.0.0',
    port: 5173,
    static: false,
    hot: true,
    historyApiFallback: true,
    client: { overlay: true },
    allowedHosts: 'all',
    onBeforeSetupMiddleware: (devServer) => {
      const app = devServer.app
      if (!app) return
      app.get('/env.js', (_req, res) => {
        const gq = process.env.GQ_API_BASE_URL || 'http://localhost:8145'
        const types = process.env.HOST_RESOLVER_TYPES || 'string'
        const sse = String(process.env.SSE_ON_LOAD || 'true')
        res.setHeader('Content-Type', 'application/javascript; charset=utf-8')
        res.end(`// Generated by webpack-dev-server\nwindow.__ENV__ = {\n  GQ_API_BASE_URL: ${JSON.stringify(gq)},\n  HOST_RESOLVER_TYPES: ${JSON.stringify(types)},\n  SSE_ON_LOAD: ${JSON.stringify(sse)}\n};\n`)
      })
    },
    setupMiddlewares: (middlewares, devServer) => {
      if (!devServer) return middlewares
      const app = devServer.app
      // lightweight runtime env for dev: serves /env.js
      app.get('/env.js', (_req, res) => {
        const gq = process.env.GQ_API_BASE_URL || 'http://localhost:8145'
        const types = process.env.HOST_RESOLVER_TYPES || 'string'
        const sse = String(process.env.SSE_ON_LOAD || 'true')
        res.setHeader('Content-Type', 'application/javascript; charset=utf-8')
        res.end(`// Generated by webpack-dev-server\nwindow.__ENV__ = {\n  GQ_API_BASE_URL: ${JSON.stringify(gq)},\n  HOST_RESOLVER_TYPES: ${JSON.stringify(types)},\n  SSE_ON_LOAD: ${JSON.stringify(sse)}\n};\n`)
      })
      return middlewares
    },
  }
}
