---
# This file describes the necessary configuration defaults to run
# goprobe v4 and its associated CLI tools goquery and gpctl
db:
  # path of the goDB database written by goprobe and read by goquery
  path: /usr/local/goProbe/db
# local_buffers sets the local buffer configuration used during rotation of a capture
local_buffers:
  # size_limit is the buffer held for packet capture during flow rotation
  # the unit is bytes
  size_limit: 67108864
  # num_buffers denotes the number of buffers (and hence maximum concurrency of Status() calls)
  # NOTE: do not change unless absolutely necessary
  num_buffers: 1
# interfaces stores the configuration for the interfaces that goprobe will capture on
interfaces:
  eth0:
    # promisc runs capturing in promiscuous mode in order to also capture
    # VLAN traffic
    promisc: false
    # ring_buffer configures the ring buffer that the kernel has available
    # to populate with packet metadata. The sizing of the ring_buffer has
    # a direct effect on goprobe's base memory consumption
    ring_buffer:
      # num_blocks describes the amount of blocks that the ring buffer
      # has available and which the kernel can fill. Make sure to have
      # more than 2 blocks per ring buffer
      #
      #  - 1 may be held in user land during writeout
      #  - 1 may be written to by the kernel
      #  - >=1 should be available in case there are many packets captured
      num_blocks: 4
      # block_size of 1 MB should be enough for interfaces with much traffic
      block_size: 1048576
  tun0:
    # there is no need for capturing in promsicuous mode on tunnel interfaces
    promisc: false
    ring_buffer:
      num_blocks: 4
      # the traffic on a tunnel interface is always smaller than the traffic
      # on, e.g. external interfaces. A smaller buffer should be sufficient
      block_size: 524288
# api configures goProbe's API server for control and querying
api:
  # addr defines what the API server binds to. This may also be a unix
  # socket.
  addr: 0.0.0.0:8145
  # profiling is enabled by default. It will only be run if one of the
  # /debug/pprof endpoints is accessed and otherwise will not have an impact
  # on performance.
  # Leaving this enabled paves the way for continuous profiling and feeding
  # such profiles back via PGO
  profiling: true
  # metrics enables scraping of metrics via /metrics endpoint
  metrics: true
# logging sets the logging parameters for goprobe
logging:
  # level info is set not to spam the logs with writeout information for interfaces
  level: debug
  # encoding logfmt is chosen over json for readability reasons
  encoding: logfmt
  # destination describes the file goprobe logs to. If left empty, goprobe will log
  # to stdout by default
  destination: stdout
